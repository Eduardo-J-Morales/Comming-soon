{
  "data":[
    {"title":"@onAnycreate",
    "concept":"A shout that is sent to all bots when a bot is created. Sent immediately after @onCreate is sent."},
  
    {"title":"@onAnyBotClicked",
    "concept":"A shout that is sent to all bots when a bot is clicked."},
    
    {"title":"@onAnyBotPointerEnter",
    "concept":"A shout that is sent to all bots when the mouse cursor starts to hover over a bot."},
    
    {"title":"@onAnyBotPointerExit",
    "concept":"A shout that is sent to all bots when the mouse cursor stops hovering over a bot."},
    
    {"title":"@onAnyBotPointerDown",
    "concept":"A shout that is sent to all bots when the user starts clicking a bot."},
    
    {"title":"@onAnyBotPointerUp",
    "concept":"A shout that is sent to all bots when the user stops clicking a bot."},
    
    {"title":"@onChat",
    "concept":"A shout that is sent to all bots when the player sends a chat message. Chat messages can be sent when the player presses the Enter key while writing a message or by clicking/tapping the 'Send Message' button to the right of the chat bar."},
    
    {"title":"@onChatTyping",
    "concept":"A shout that is sent to all bots when the player changes the text in the chat bar. Only triggered when the chat bar is visible."},
    
    {"title":"@onFileUpload",
    "concept":"A shout that is sent to all bots when the user drags a file into the window."},
    
    {"title":"@onGridClick",
    "concept":"A shout that is sent to all bots when the user clicks on empty space."},
    
    {"title":"@onGridDown",
    "concept":"A shout that is sent to all bots when the user starts clicking on empty space."},
    
    {"title":"@onGridUp",
    "concept":"A shout that is sent to all bots when the user stops clicking on empty space."},
    
    {"title":"@onPortalChanged",
    "concept":"A shout that is sent to all bots when a portal changes on the config bot."},
    
    {"title":"@onBarcodeScanned",
    "concept":"A shout that is sent to all bots when the player scans a barcode."},
    
    {"title":"@onBarcodeScannerOpened",
    "concept":"A shout that is sent to all bots when the barcode scanner is opened."},
    
    {"title":"@onBarcodeScannerClosed",
    "concept":"A shout that is sent to all bots when the barcode scanner is closed."},
    
    {"title":"@onQRCodeScanned",
    "concept":"A shout that is sent to all bots when a QR Code is scanned."},
    
    {"title":"@onQRCodeScannerOpened",
    "concept":"A shout that is sent to all bots when the QR Code Scanner is opened."},
    
    {"title":"@onQRCodeScannerClosed",
    "concept":"A shout that is sent to all bots when the QR Code Scanner is closed."},
    
    {"title":"@onImageClassified",
    "concept":"A shout that is sent to all bots when an image has been classified."},
    
    {"title":"@onImageClassifierOpened",
    "concept":"A shout that is sent to all bots when the image classifier is opened."},
    
    {"title":"@onImageClassifierClosed",
    "concept":"A shout that is sent to all bots when the image classfier is closed."},
    
    {"title":"@onPhotoCaptured",
    "concept":"A shout that is sent to all bots when a picture has been captured from the photo camera."},
    
    {"title":"@onPhotoCameraOpened",
    "concept":"A shout that is sent to all bots when the photo camera is opened."},
    
    {"title":"@onPhotoCameraClosed",
    "concept":"A shout that is sent to all bots when the photo camera is closed."},
    
    {"title":"@onTapCode",
    "concept":"A shout that is sent to all bots whenever a 4-digit tap code is entered."},
    
    {"title":"@onKeyDown",
    "concept":"A shout that is sent to all bots whenever the user starts pressing a key."},
    
    {"title":"@onKeyUp",
    "concept":"A shout that is sent to all bots whenever the user stops pressing a key."},
    
    {"title":"@onKeyRepeat",
    "concept":"A shout that is sent to all bots whenever the user holds down a key and it automatically fires 'repeated key event'. (This is like when you hold down the 'a' key and then the computer starts continually typing 'a' characters until you stop holding the key"},
    
    {"title":"@onInstJoined",
    "concept":"A shout that is sent when a inst is loaded. An inst is considered loaded once all the bots in each space have been added (See #onBotAdded). Sent to every inst that is loaded."},
    
    {"title":"@onInstLeave",
    "concept":"A shout that is sent when a inst is unloaded. Sent to every inst that is loaded."},
    
    {"title":"@onInstStreaming",
    "concept":"A shout that is sent when a inst is connected and fully synced. Note that this can occur multiple times throughout the lifetime of a session because the player can lose and reegain its connection to the inst. Sent to every inst that is loaded."},
    
    {"title":"@onInstStreamLost",
    "concept":"A shout that is sent when a inst has been temporarily disconnected from the server. Note that this can occur multiple times trhoughout the lifetime of a session because the player can lose and regain its connection to the inst Sent to every inst that is loaded."},
    
    {"title":"@onCheckout",
    "concept":"A shout that is sent when the user submits their credit card info to purchase something."},
    
    {"title":"@onPaste",
    "concept":"A shout that is sent when some text is pasted into the server. This happens by pressing Ctrl+v or Cmd+V while something is in your clipboard."},
    
    {"title":"@onPaymentSuccessful",
    "concept":"A shout that is sent when payment has been approved for a checkout."},
    
    {"title":"@onPaymentFailed",
    "concept":"A shout that is sent when payment has been rejected for a checkout."},
    
    {"title":"@onAnyBotDrag",
    "concept":"A shout that is sent whenever a bot starts to be dragged."},
    
    {"title":"@onAnyBotDragging",
    "concept":"A shout that is sent whenever a bot would be moved while dragging. Note that this whisper is only sent for drag operations that have called os.enableCustomDraggin()."},
    
    {"title":"@onAnyBotDrop",
    "concept":"A shout that is sent whenever a bot is dropped after being dragged."},
    
    {"title":"@onAnyBotDropEnter",
    "concept":"A shout that is sent whenever a bot is dragged onto another bot."},
    
    {"title":"@onAnyBotDropExit",
    "concept":"A shout that is sent whenever a bot is dragged off of another bot."},
    
    {"title":"@onAnyListen",
    "concept":"A shout that is sent whenever a whisper or shout is issued."},
    
    {"title":"@onAnyMaxLODEnter",
    "concept":"A shout that is sent whenever a bot enters its maximum Level-Of-Detail. Only sent for bots that have one of @onMaxLODEnter, @onMaxLODExit, @onMinLODEnter, @onMinLODExit, #maxLODThreshold or #minLODThreshold specified."},
    
    {"title":"@onAnyMinLODEnter",
    "concept":"A shout that is sent whenever a bot enter its minimum Level-Of-Detail. Only sent for bots that have one of @onMaxLODEnter, @onMaxLODExit, @onMinLODEnter, @onMinLODExit, #maxLODThreshold or #minLODThreshold specified."},
    
    {"title":"@onAnyMaxLODExit",
    "concept":"A shout that is sent whenever a bot exits its maximum Level-Of-Detail. Only sent for bots that have one of @onMaxLODEnter, @onMaxLODExit, @onMinLODEnter, @onMinLODExit, #maxLODThreshold or #minLODThreshold specified."},
    
    {"title":"@onAnyMinLODExit",
    "concept":"A shout that is sent whenever a bot exits its minimum Level-Of-Detail. Only sent for bots that have one of @onMaxLODEnter, @onMaxLODExit, @onMinLODEnter, @onMinLODExit, #maxLODThreshold, or #miinLODThreshold specified."},
    
    {"title":"@onAnyFocusEnter",
    "concept":"A shout that is sent whenever a bot starts being focused by the player. Focus is when the bot is in the center of the screen. Only sent if #focusable is true."},
    
    {"title":"@onAnyFocusExit",
    "concept":"A shout that is sent whenever a bot stops being focused by the player. Focus is when the bot is in the center of the screen."},
    
    {"title":"@onBeginAudioRecording",
    "concept":"A shout that is sent whenever audio recording starts. There are no arguments with this listener."},
    
    {"title":"@onAudioChunk",
    "concept":"A shout that is sent whenever a piece of audio is prepared for streaming. Only called when os.beginAudioRecording(options?) is called with stream set to true."},
    
    {"title":"@onEndAudioRecording",
    "concept":"A shout that is sent whenever audio recording stops. If the data was streamed, that is null. Otherwise, that is a Blob object that contains the recorded data."},
    
    {"title":"@onEnterAR",
    "concept":"A shout that is sent whenever the device enters augmented reality mode. You can enter AR by calling os.enableAR(options?). There are no arguments with this listener."},
    
    {"title":"@onExitAR",
    "concept":"A shout that is sent whenever the device exits augmented reality mode. You can exit AR by calling os.disableAR(). There are no arguments with this listener."},
    
    {"title":"@onEnterVR",
    "concept":"A shout that is sent whenever the device enters virtual reality mode. You can exit VR by calling os.enterVR(options?). There are no arguments with this listener."},
    
    {"title":"@onExitVR",
    "concept":"A shout that is sent whenever the device exits virtual reality mode. You can exit VR by calling os.disableVR(). There are no arguments with this listener."},
    
    {"title":"@onWebhook",
    "concept":"A shout that is sent whenever a webhook is received. If data is returned, the first result will be used as the HTTP response. The headers property is an object that specifies the HTTP headers that should be set on the response. Each property is a header name and the value is the value set on the header. The status property is the numerical status code that should be set on the response. If omitted, then status code 200 will be used. The data property is the data that should be included in the response body."},
    
    {"title":"@onAnyAction",
    "concept":"A shout that is sent whenever an action happens."},
    
    {"title":"@onSerialData",
    "concept":"A shout that is sent whenever a stream data is received."},
    
    {"title":"@onSheetTagClick",
    "concept":"A shout that is sent when a tag name is clicked in the sheet portal."},
    
    {"title":"@onSheetBotClick",
    "concept":"A shout that is sent when a Bot is clicked in the sheet portal."},
    
    {"title":"@onSheetBotIDClick",
    "concept":"A shout that is sent when a Bot ID is clicked in the sheet portal."},
    
    {"title":"@onMeetLoaded",
    "concept":"A shout that is sent when the meet portal finishes loading. Note that when this shout is sent, the user may not actually be in the meeting. They simply be in the meeting waiting area and not actually in the meeting. If you want notification when the user has become a participant in a meeting, use @onMeetEntered. It is safe to run os.meetCommand() after this shout has been received."},
    
    {"title":"@onMeetLeave",
    "concept":"A shout that is sent when the meet portal is closed."},
    
    {"title":"@onMeetEntered",
    "concept":"A shout that is sent when the user enters a meet portal meeting. Unlike @onMeetLoaded, this listener is triggered only when the user becomes an active participant in a meeting. That is, after they've clicked the 'join' button to enter the meeting."},
    
    {"title":"@onMeetExited",
    "concept":"A shout that is sent when the user exits a meet portal meeting. Unlike @onMeetLeave, this listener may be triggered if the user exits a breakout room and re-enters the main meeting room."},
    
    {"title":"@onMeetRecordingLinkAvailable",
    "concept":"A shout that is sent when a meeting recording link is available."},
    
    {"title":"@onRemoteData",
    "concept":"A shout that is sent whenever a message is received from another remote device."},
    
    {"title":"@onRemoteJoined",
    "concept":"A shout that is run on every other remote device when it joins the current server. Since this shout is run on every device, you should be careful about performing duplicate actions. When i doubt, elect a remote to perform all actions that should only be executed once."},
    
    {"title":"@onRemoteLeave",
    "concept":"A shout that is run every other remote device when it leaves the current server. Since this shout is run on every device, you should be careful about performing duplicate actions. When in doubt, elect a remote to perform all actions that should only be executed once."},
    
    {"title":"@onAnyBotsAdded",
    "concept":"A shout that is sent when a list of bots is added to the current server. Unlike @onAnyCreate, this listen tag is triggered whenever the botts have been added to the current device's server, even if the bots have already been created. An example of this happening is when you first load a server. Even though all the bots have already been created, they still need to be added to the server in order for you to interact with them. Note that this listen tag is triggered after executing scripts have finished running. This means that if a script updates the same tag multiple tiimes, @onAnyBotsAdded will still only be triggered once. This is in contrast to @onCreated which is triggered immediately after the bot has been created. Also note that this listen tag can be triggered before @onInstJoined. This measn that it is possible for bots in other spaces to not be available when this listener is triggered."},
    
    {"title":"@onAnyBotsRemoved",
    "concept":"A shout that is sent when a list of bots is removed from the current server. Unlike @onDestroy, this listen tag is triggered whenever the bots have been removed from the current device's server, even if the bots were not destroyed. An example of this happening is when another player disconnects. Even though their config bots were not destroyed, they still need to be removed from the server. Note that this listen tag is triggered after executing scripts have finished running. This measn that if a script updates the same tag multiple times, @onAnyBotsRemoved will still only be triggered once. This is in contrast to @onCreate which is triggered immediately after the bot has been created. Also note that this listen tag can be triggered before @onInstJoined. This means that it is possible for bots in other spaces to not be available when this listener is triggered."},
    
    {"title":"@onAnyBotsChanged",
    "concept":"A shout that is sent when one or more tags are changed on a list of bots in the current server. This listen tag is triggered whenever the bots have been updated in the current device's server, even if the bots were not updated locally. An example of this happening is when another player changes a tag in the sheet portal. Even though the change was made on their device, it will show up on the current device. Note that this listen tag is triggered after executing scripts have finished running. This means that if a script updates the same tag multiple times, @onAnyBotsChanged will still only be triggered once. This is in contrast to @onCreate which is triggered immediately after the bot has been created. Also note that this listen tag can be triggered before @onInstJoined. This means that it is possible for bots in other spaces to not be available when this listener is triggered."},
    
    {"title":"@onError",
    "concept":"A shout that is sent when an unhandled error occurs in a listen tag. Error can occur for many reasons, but common ones include data being uunexpectedly missing (e.g. 'Cannot read property xyz of undefined') or invalid usage (e.g. 'xyz is not a function'). Note that errors which occur in @onError listen tag will not trigger further onError calls. To view those errors, open the developer tools console."},

    {"title":"@onRoomJoined",
    "concept":"A shout that is sent whenever a multimedia chat room is joined by using os.joinRoom(roomName, options?)."},

    {"title":"@onRoomLeave",
    "concept":"A shout that is sent whenever a multimedia chat room is exited by using os.leaveRoom(roomName, options?)."},

    {"title":"@onRoomStreaming",
    "concept":"A shout that is sent whenever the user becomes connected to a multimedia chat room. Work similarly to @onInstStreaming except that it is only sent for chat rooms."},

    {"title":"@onRoomStreamLost",
    "concept":"A shout that is sent whenever the user becomes disconnected from a multimedia chat room. Work similarly to @onInstStreamLost except that it is only sent for chat rooms."},

    {"title":"@onRoomTrackSubscribed",
    "concept":"A shout that is sent whenever a media track is discovered inside a multimedia chat room. Media tracks represent streams of data like video from a camera or audio from a microphone. This shout will be triggered for each media track that is published by each user in the room, including the tracks published by the local user."},

    {"title":"@onRoomTrackUnsubscribed",
    "concept":"A shout that is sent whenever a media track is removed from inside a multimedia chat room. This can happen if a track is muted by the user that is publishing it or if the user exits the room."},

    {"title":"@onRoomSpeakersChanged",
    "concept":"A shout that is sent whenever one or more users begin/end speaking. Useful for providing speaking indicators or moving the active speakers to a prominent position."},

    {"title":"@onRoomRemoteJoined",
    "concept":"A shout that is sent whenever a remote user joins a multimedia chat room that the local user is participating in."},

    {"title":"@onRoomRemoteLeave",
    "concept":"A shout that is sent whenever a remote user leaves a multimedia chat room that the local user is participating in."},

    {"title":"@onRoomOptionsChanged",
    "concept":"A shout that is sent whenever the local room options have been changed. Useful for detecting if the user's camera feed or microphone has been muted/unmuted."},

    {"title":"@onAnyFormAnimationStarted",
    "concept":"A shout that is sent to all bots whenever an animation is started via the os.startFormAnimation(botRoBots, nameOrIndex, options?) function."},

    {"title":"@onAnyFormAnimationStopped",
    "concept":"A shout that is sent to all bots whenever an animation is stopped via the os.stopFormAnimation(botOrBots, options?) function."},

    {"title":"@onAnyFormAnimationLooped",
    "concept":"A shout that is sent to all bots whenever an animation finishes and starts to repeat based on the loop rules given os.startFormAnimation(botOrBots, nameOrIndex, options?) in the options."},

    {"title":"@onAnyFormAnimationFinished",
    "concept":"A shout that is sent to all bots whenever an animation that was started by os.startFormAnimation(botOrBots, nameOrIndex, options?) stops. This shout is sent both for when the animation is manually stopped (by calling os.stopFormAnimation(botOrBots, options?)) and also when it stops because it shouldn't repeat."},

    {"title":"@onDocumentAvailable",
    "concept":"A shout that is sent to all bots when the Document object is made available to scripts."},

    {"title":"@onSpaceMaxSizeReached",
    "concept":"A shout that is sent to all bots when a space rejects persistent storage of one or more bot changes due to exceeding the storage limits of the space. There are a several consequences to this: 1. Some bot/tag changes were not persistently stored in the space. 2. Those same bot/tag changes will still be available on the machine that the change was created on, as long as the browser tab has not been reloaded. 3. Future changes to that space may or may not be persisted, depending on whether the individual changes would cause the space to exceed its storage limit. As a result, large changes are more likely to be rejected than small changes. As such, if this shout occurs in an inst that you are working in, it is highly recommended to make a manual backup so that you don't loose any data."},

    {"title":"@onSpaceRateLimitExceeded",
    "concept":"A shout that is sent to all bots when a space rejects a change because it would exceed the rate limit for the space. Rate limits are used to prevent too many changed at one time from overloading the system, and they only apply to the shared space."},

    {"title":"@onCollaborationEnabled",
    "concept":"A shout that is sent to all bots when collaboration becomes enabled for the current inst."},

    {"title":"@onAllowCollaborationUpgrade",
    "concept":"A shout that is sent to all bots when os.enableCollaboration() is able to be called."},

    {"title":"@onDisallowCollaborationUpgrade",
    "concept":"A shout that is sent to all bots when os.enableCollaboration() is no longer able to be called."},

    {"title":"@onResolvedModule",
    "concept":"A shout that is sent to all bots when a module is being resolved. Used to resolve statements like import { foo } from 'myCustomModule'. In the case that multiple bots are listening for this shout, the first bot to resolve a non-null value will be used. If none of the bots return a valid value, then the default mechanism for resolving modules will be used. The default mechanism for resolving modules is as follows: 1. Scripts based on system tag. You can import exported functions and variables from any script based on the system tag of its bot. For example, import {abc} from 'example.system.tag' can be used to import the abc variable or function from the bot with the example.system system and the tag tag. 2. URLs. The URLs can be imported. For example, import { sortBy } from 'https://esm.run/lodash-es'; imports the sortby function from lodash-es module provided by https://esm.run."}
  ]
}
