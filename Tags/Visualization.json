{
  "data": [
    { "title": "color", 
      "concept": "The color of the bot." },
   
    { "title": "cursor", 
      "concept": "The cursor that should be used when the mouse pointer is hovering over the bot in the bot and menu portals. Note that when using a custom cursor image, the image should be 32x32 pixels or smaller. This is because that is the largest cursor image size taht some operating systems support." },
    
    { "title": "cursorHotspot", 
      "concept": "The X and Y position of the pixel in the cursor image that is the 'hotspot'. That is, the pixel which represents the point or tip of the cursor The top left of the image is (0,0)." },
    
    { "title": "strokeColor", 
      "concept": "The color of the bot's outline." },
    
    { "title": "strokeWidth", 
      "concept": "The width of the bot's outline." },
    
    { "title": "lineTo", 
      "concept": "The bot, bot ID, list of bots, or list of bot IDs that this bot should draw lines to." },
    
    { "title": "lineWidth", 
      "concept": "The width of the lines from this bot" },
    
    { "title": "lineColor", 
      "concept": "The color of the lines." },
    
    { "title": "label", 
      "concept": "The text that the bot should show in a label." },
    
    { "title": "labelColor", 
      "concept": "The color of the text in the label." },
    
    { "title": "labelOpacity", 
      "concept": "The opacity of the text in the label." },
    
    { "title": "labelFontSize", 
      "concept": "The font size of the text in the label. Changing this value scales the text characters in the label which changes the text layout." },
    
    { "title": "labelPadding", 
      "concept": "The amount of space that should be between the edge of the bot and the edge of the label. Units are in grid spaces. When #labelFontSize is set to auto, this setting affects both the label height and width. Otherwise, it only affects the width." },
    
    { "title": "labelPaddingX", 
      "concept": "The amount of space that should be between the side of the bot and the side of the label. Units are in grid spaces. This tags is similar to #labelPadding except that it only affects the width of the label." },
    
    { "title": "labelPaddingY", 
      "concept": "The amount of space that should be between the top of the bot and the top of the label. Units are in grid spaces. This tag is similar to #labelPadding except that it only affects the height of the label. As such, this tag only has an affect when #labelFontSize is set to auto." },
    
    { "title": "labelSizeMode", 
      "concept": "The sizing mode for the label." },
    
    { "title": "labelPosition", 
      "concept": "The anchor position for the label." },
    
    { "title": "labelAlignment", 
      "concept": "The text alignment for the label." },
    
    { "title": "labelFontAddress", 
      "concept": "The address of the font that the label should use." },
    
    { "title": "labelWordWrapMode", 
      "concept": "The word wrapping mode that the label should use. Useful for automatically fitting the text onto the bot." },
    
    { "title": "labelFloatingBackgroundColor", 
      "concept": "The background color of the floating label. Only works when #labelPosition is set to floating or floatingBillboard." },

    { "title": "scale", 
      "concept": "The uniform scale of the bot. Defaults is to 1." },

    { "title": "scaleX", 
      "concept": "The X scale (width) of the bot. Combines with the #scale tag to determine the final width of the bot. Defaults to 1." },

    { "title": "scaleY", 
      "concept": "The Y scale (length) of the bot. Combines with the #scale tag to determine the final length of the bot. For menu bots, you can use auto. This scales the bot's height to fit its label. Defaults to 1." },

    { "title": "scaleZ", 
      "concept": "The Z scale (height) of the bot. Combines with the #scale tag to determine the final height of the bot. Defaults to 1." },

    { "title": "scaleMode", 
      "concept": "How the form is scaled to fit inside the bot. Note that this setting does not affect #scale, #scaleX, #scaleY or #scaleZ. Instead, it ccahnges how custom forms like meshes are scaled to fit inside the unit cube. Also note that this setting affects a bot's collision volume. The collision volume will always try to wrap the bot's form to the best of tis ability. This means that if you have a really large mesh the collider will scale up to surround the mesh." },

    { "title": "form", 
      "concept": "The shape that the bot should be displayed as." },

    { "title": "formSubtype", 
      "concept": "The subtype that the form should use. Useful for specifying how a mesh should be loaded." },

    { "title": "formLightIntensity", 
      "concept": "The intensity of the light." },

    { "title": "formLightTarget", 
      "concept": "The target of the light. Bot must have a #formSubtype of directionalLight or spotLight. Bot can not target self." },

    { "title": "formLightDistance", 
      "concept": "The maximum range of the light. Bot must have a #formSybtype of spotLight." },

    { "title": "formLightAngle", 
      "concept": "Represents the angle between edges of spotLight. Bot must have a #formSubtype of spotLight. Angle is in radians." },

    { "title": "formLightPenumbra", 
      "concept": "Represents the percent of the spoltight cone that is attenuated due to penumbra. Bot must have a #formSubtype of spotLight. Takes values between 0 and 1." },

    { "title": "formLightDecay", 
      "concept": "The amount the light dims along the distance of the light. Bot must have a #formSubtype of spotlight. In context of physically-correct rendering the default value should not be changed." },

    { "title": "formLightGroundColor", 
      "concept": "The light's ground color.Bot must have a #formSubytpe of hemisphereLight." },

    { "title": "formAddress", 
      "concept": "The address that the bot should represent data from. Whe #form is set to cube, skybox, shpere, or sprite, the address should be the URL of the image that the bot should display. When #form is set to mesh and #formSubtype is set to gltf, the address should be the URL of the GLTF file that should be displayed. When #form is set to iframe and #formSybtype is set to html, the address should b ethe HTML that should be displayed. When #form is set to iframe and #formSybtype is set to src, the address should be the HTML that should be displayed. When the bot is in the menu portal, this is the URL of the image or video that should be shown on the menu item. It can also be cube to show an icon of a cube, egg to show an egg icon, and helix to show an icon of a DNA helix. If the given value is not a URL or one of the predefined icons, then the specified Material Icon wil be shown." },

    { "title": "formAddressAspectRatio", 
      "concept": "The aspect ratio that should be used to ensure that the the image/video from #formAddress is displayed correctly. Aspect ratio is the numerical ratio representing the width of an image divided by the height. For example, a 1080p image has a resolution of 1920x1080 which means it has an aspect ratio of 1920/1080 = 16/9 = ~1.7777777. By default, CasualOS displays all images with an aspect ratio of 1. An aspect ratio of 1 ensures that the entire bot is covered, but if the original image has a different aspect ratio then it will appear distorted. To solve this, you can use the #formAddressAspectRatio tag to ensure that the aspect ratio that the image is displayed at matches the original aspect ratio. Also note that the negative aspect ratios will mirror the image horizontally. Currently only sypported by the cube, circle, and spreite forms." },

    { "title": "formAnimation", 
      "concept": "The name of the animation that the mesh should play. Only works for mesh forms." },
    
    { "title": "formAnimationAddress", 
      "concept": "The URL that the animations for the mesh should be loaded from. For GLTF forms, this should be the URL of the GLTF file that contains the animaitons that should be used for the mesh." },
    
    { "title": "meshPositioningMode", 
      "concept": "The positioning mode that should be used for GLTF meshes." },
    
    { "title": "formOpacity", 
      "concept": "The opacity of the bot's form. Allows bots to be semi-transparent." },
    
    { "title": "formRenderOrder", 
      "concept": "The render order that should be used for this bot in the grid portals. Setting this property to a value other than 0 overrides the automatically calculated render order which is based on the distance of each bot to the portal camera. It is not recommended to use this tag unless you ra dealing with transparency issues caused by overlapping PNG #formAddress images. Higher values mean the bot will be rendered first, and lower values means the bot will be rendered last." },
    
    { "title": "formDepthTest", 
      "concept": "Whether depth testing is enabled for this bot in the grid portals." },
    
    { "title": "formDepthWrite", 
      "concept": "Whether depth writting is enabled for this bot in the grid protals." },
    
    { "title": "formBuildStep", 
      "concept": "The build step that should be displayed for the bot's LDraw file. Only works for bots that have a #form of mesh and a #formSybtype of ldraw or ldrawText. Use of.ldrawCountAddressBuildSteps() or os.ldrawCountTextBuildSteps() to get the number of build steps that an LDraw file has." },
    
    { "title": "formLDrawPartsAddress", 
      "concept": "The address that additional parts should be loaded from for the bot's LDraw file. Only works for bots that have a #form of mesh and #formSybtype of ldraw or ldrawText." },
    
    { "title": "gltfVersion", 
      "concept": "The GLTF specification version that should be used to load a GLTF model." },
    
    { "title": "progressBar", 
      "concept": "Causes a progress bar to be shown for the bot. Range is between 0 and 1. Needs both progressBarBackgroundColor and progressBarColor to visualize the progress." },
  
    { "title": "progressBarColor", 
      "concept": "The foreground color of the progress bar." },
    
    { "title": "progressBarBackgroundColor", 
      "concept": "The background color of the progress bar." },
    
    { "title": "pogressBarPosition", 
      "concept": "The anchor position for the progess bar." },
    
    { "title": "anchorPoint", 
      "concept": "The position that the bot form should rotate and scale around." },
    
    { "title": "orientationMode", 
      "concept": "The mode that determines how the bot automatically rotates." },

    { "title": "maxLOADThereshold", 
      "concept": "The minimum percentage of the screen that the bot form should take up in order to enter the maximum Level-Of-Detail. When the maximum LOD is entered the @onMaxLODEnter listener is triggered. When the maximum LOD is exited the @onMaxLODExit listener is triggered." },

    { "title": "minLODThreshold", 
      "concept": "The maximum percentage of the screen that the bot form should tak up in order to enter the minimum Level-Of-Detail. When the minimum LOD is entered the @onMinLODEnter listener is triggered. When the minimum LOD is exited the @onMinLODExit listener is triggered." },

    { "title": "menuItemStyle", 
      "concept": "The custom CSS styles that should be applied to the menu item. Only applies to bot that are being shown in the menu portal. This is useful for positioning and styling the item in ways that are not possible using normal tags. Overridden by conflicting properties like #color or #labelColor. When setting this tag via the sheet, it is useful to utilize DNA tags to ensure that the resulting value is considered an object." },

    { "title": "menuItemLabelStyle", 
      "concept": "The custom CSS styles that should be applied to the menu item label. Only applies to bots that are being shown in the menu portal. This is useful for styling the label in ways that are not possible using normal tags. Overrides conflicting properties like #color or #labelColor." },

    { "title": "", 
      "concept": "" },

    { "title": "", 
      "concept": "" },

    { "title": "", 
      "concept": "" },

    { "title": "", 
      "concept": "" },
  ]
}
