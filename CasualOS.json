{
  Animation:[
    {  
      title:"animateTag()",
      concept:"
      animates multiple tags on the given bot based on the specified parameters.
      This works similarly to animateTag() but instead of providing a tag name, you instead provide an object for the fromValue and toValue options which contains the tags that should be animated.
      Returns a promise that resolves when the animation is finished and throw an error when the animation is canceled.This is useful for gradually changing a set of tags on a bot over time. For example moving a bot from point A to point B without teleporting it.
      Unlike calling animateTag() multiple times, animations started with this function
      are grouped together, This means that canceling one animation in the group will also cancel the others.
      This function is fully integrated with tags masks. This lets you animate tag values in the tempLocal, local, player, and shared spaces.
      ",
      code:"
  await animateTag(bot, {
    fromValue: {
        homeX: 0,
        homeY: 0,
    },
    toValue: {
        homeX: 1,
        homeY: 1
    },
    duration: 5
});

os.toast("Animation finished!");

await animateTag(bot, {
    fromValue: {
        homeX: 0,
        homeY: 0,
    },
    toValue: {
        homeX: 5,
        homeY: 5
    },
    duration: 2,
    tagMaskSpace: 'tempShared'
});
"
    },
    {  
      title:"clearAnimations()",
      concept:"
      Cancels the animations that are running on the given boot(s). 
      If a tag is specified then only animations gor the given tag will be canceled.
      The first parameter is a Bot(s) and is the bot, bot ID, 
      or list of bots that should cancel their animations should be canceled for.",
      code:""
    },
    {  
      title:"os.tartFormAnimations()",
      concept:"
      Starts the given animation on the given bot or list of bots using the given options. 
      Returns a promise that resolvees once the animation(s) have been started.
      Triggers the @onFormAnimationStarted and @onAnyFormAnimationStarted listeners once the animation has started.
      
      The first parameter is a bot(s) and is the bot or list of bots that the animation should be started on.
      The second parameter is a number or a string and is the name of the animation that sould be started.
      The third parameter is optional and is a StartFormAnimationOpstions and is the options that should be used to play the animation.
      ",
      code:"
      await os.startFormAnimation(thisBot, "Run");

      await os.startFormAnimation(getBots(inDimension("home")), "Run");

      await os.startFormAnimation(thisBot, "Run", {
    loop: {
        mode: 'repeat',
        count: 5
    }
});

await os.startFormAnimation(thisBot, "Run", {
    startTime: os.localTime + 5000
});

await os.startFormAnimation(thisBot, "Run", {
    timeScale: 0.5
});
      "
    },
    {  
      title:"os.stopFormAnimation()",
      concept:"
      Stops the animations that are running on the given bot or list og bots using the given options. 
      Returns a promise that resolves once the animations have been stopped.
      This function only works for animations that have been started by os.startFormAnimation().
      Triggers the @onFormAnimationStopped and @onAnyFormAnimationStopped listeners once the animation has stopped.
      The first parameter is a bot(s) and is the bot or list of bots whosse animations should be stopped.
      The second parameter is optional and is a StopFormAnimationOptions and is the options that should be used for stopping the animations.
      ",
      code:"
      await os.stopFormAnimation(thisBot);

      await os.stopFormAnimation(thisBot, {
    fadeDuration: 1000 // Take 1 second to stop the animation
});

await os.stopFormAnimation(thisBot, {
    stopTime: os.localTime + 5000
});


      "
    },
    {  
      title:"os.listFormAnimations()",
      concepts:"
      Retrieves the list of animations that are available on the given bot or GLTF mesh address. 
      Returns a promise that resolves with the list of available animations.
      The first parameter is a string and is the bot or address that the animation list should be retrieved from
      ",
      code:"
      const animations = await os.listFormAnimations(thisBot);

      const animations = await os.listFormAnimations('https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/Fox/glTF/Fox.gltf');
      "
    },
    {  
      title:"os.bufferFormAddressGLTF()",
      concept:"Pre-caches the given GLTF mesh address so that it will load instantly when used on a bot later.
      Return a promise that resolves once the address has been cached.
      The first paramteter is a string and is the address that should be cached.
      "  
    }
  ]
}
